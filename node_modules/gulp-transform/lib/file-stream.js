'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileStream = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stream = require('stream');

var _transform2 = require('./transform');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileStream = exports.FileStream = function (_Transform) {
  _inherits(FileStream, _Transform);

  function FileStream(transformFn, file, options) {
    _classCallCheck(this, FileStream);

    var _this = _possibleConstructorReturn(this, (FileStream.__proto__ || Object.getPrototypeOf(FileStream)).call(this));

    _this.fn = transformFn;
    _this.file = file;
    _this.opts = options;
    _this.data = [];
    return _this;
  }

  _createClass(FileStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, next) {
      this.data.push(chunk);
      next();
    }
  }, {
    key: '_flush',
    value: function _flush(done) {
      var _this2 = this;

      var contents = Buffer.concat(this.data);

      (0, _transform2.transform)(this.fn, contents, this.file, this.opts).then(function (result) {
        _this2.push(result);
        done();
      }).catch(function (err) {
        done(err);
      });
    }
  }]);

  return FileStream;
}(_stream.Transform);